[project]
name = "grz-db"
version = "0.0.1"
description = "SQL models for grz-cli and grz-watchdog."
authors = [{ name = "Till Hartmann", email = "till.hartmann@bih-charite.de" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.12,<4.0"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "alembic>=1.16.1",
    "cryptography>=45.0.3",
    "sqlmodel>=0.0.24",
]

[project.urls]
Homepage = "https://tedil.github.io/grz-db/"
Repository = "https://github.com/tedil/grz-db"
Documentation = "https://tedil.github.io/grz-db/"

[dependency-groups]
dev = [
    "pytest>=7.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "deptry>=0.23.0",
    "mypy>=0.991",
    "ruff>=0.11.5",
]
test = [
    "pytest",
    "pytest-mock",
    "pytest-cov",
    "pytest-sugar",
]
lint = [
    "ruff",
    "pydantic",
    "pyrefly",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/grz_db"]

[tool.mypy]
files = ["src"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py312"
line-length = 120
fix = true

[tool.ruff.lint]
fixable = [
    "UP",
    "I",
    "D",
]
ignore = [
    "E111",
    "E114",
    "E116",
    "PLW",
    "RUF001",
    "RUF010",
    "RUF012",
    "N818",
    "B008",
    "PLR2004",
    "D200",
    "D205",
    "D400",
    "D401",
    "D107",
    "D206",
    "D300",
    "UP040",
]
select = [
    "C90",
    "F",
    "I",
    "S",
    "B",
    "N",
    "UP",
    "PL",
    "RUF",
    "SIM",
    "D",
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # tryceratops
    "TRY",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]


[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.tox]
requires = ["tox>=4.23"]
env_list = ["format-check", "lints", "pyrefly", "3.12", "3.13"]
allowlist_externals = ["pytest", "ruff"]
isolated_build = true

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"
description = "run unit tests"
dependency_groups = ["test"]
commands = [["pytest", { replace = "posargs", default = ["tests"], extend = true }]]

[tool.tox.env."format-check"]
runner = "uv-venv-lock-runner"
skip_install = true
dependency_groups = ["lint"]
commands = [["ruff", "format", "--check"]]

[tool.tox.env."lints"]
runner = "uv-venv-lock-runner"
skip_install = true
dependency_groups = ["lint"]
commands = [["ruff", "check"]]

[tool.tox.env."pyrefly"]
runner = "uv-venv-lock-runner"
skip_install = false
dependency_groups = ["lint"]
commands = [["pyrefly", "check"]]
[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/src/grz_db/migrations"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
timezone = "UTC"

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the exec runner,
# execute a binary
# name = "ruff"
# type = "exec"
# executable = "%(here)s/.venv/bin/ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
